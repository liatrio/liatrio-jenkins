# A Kubernetes ConfigMap providing the configuration-as-code for Jenkins
# Kubernetes Cloud Config w/ template
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: jenkins-configuration-as-code
data:
  configuration-as-code.yaml: |
    unclassified:
      location:
        url: http://192.168.99.100:30000/
    jenkins:
      clouds:
        - kubernetes:
            name: kubernetes
            containerCapStr: 100
            jenkinsUrl: http://${MY_POD_IP}:8080
            templates:
              - name: docker
                label: docker
                nodeUsageMode: NORMAL
                containers:
                  - name: docker
                    image: "docker:1.11"
                    alwaysPullImage: true
                    workingDir: "/home/jenkins"
                    ttyEnabled: true
                    command: cat
                    args: ""
                    resourceRequestCpu: "500m"
                    resourceLimitCpu: "1000m"
                    resourceRequestMemory: "1Gi"
                    resourceLimitMemory: "2Gi"
                volumes:
                  - HostPathVolume:
                      hostPath: "/var/run/docker.sock"
                      mountPath: "/var/run/docker.sock"
              - name: jnlp-slave
                label: jnlp-slave
                nodeUsageMode: NORMAL
                containers:
                  - name: jnlp
                    image: jenkins/jnlp-slave:latest
                    alwaysPullImage: true
                    workingDir: "/home/jenkins"
                    ttyEnabled: true
                    command: /usr/local/bin/jenkins-slave
                    args: ""
                    resourceRequestCpu: "500m"
                    resourceLimitCpu: "1000m"
                    resourceRequestMemory: "1Gi"
                    resourceLimitMemory: "2Gi"
              - name: maven
                label: mavenpodtemplate
                nodeUsageMode: EXCLUSIVE
                containers:
                  - name: maven
                    image: maven:3.3.9-jdk-8-alpine
                    ttyEnabled: true
                    command: cat
                    args: ""
                    resourceRequestCpu: "500m"
                    resourceLimitCpu: "1000m"
                    resourceRequestMemory: "1Gi"
                    resourceLimitMemory: "2Gi"
                volumes:
                  - emptyDirVolume:
                      memory: false
                      mountPath: "/tmp"
                idleMinutes: "1"
                activeDeadlineSeconds: "120"
                slaveConnectTimeout: "1000"
    jobs:
      - script: >
          folder('Containers') {
              displayName('Containers')
              description('Containers')
          }
           multibranchPipelineJob('Containers/Multi-Pipeline-Example') {
             branchSources {
               github {
                 repoOwner('liatrio')
                 repository('liatrio-jenkins')
               }
             }
             orphanedItemStrategy {
               discardOldItems {
                 numToKeep(1)
               }
             }
           }
      - script: >
          pipelineJob('Containers/jenkins-master') {
            def repo = 'https://github.com/liatrio/liatrio-jenkins.git'
            def script = 'Jenkinsfile'
            triggers {
              scm('H/5 * * * *')
            }
            description("Pipeline for $script in $repo")
            definition {
              cpsScm {
                scm {
                  git {
                    remote { url(repo) }
                    branches('master', 'joblist')
                    scriptPath(script)
                    extensions { }  // required as otherwise it may try to tag the repo, which you may not want
                  }
                }
              }
            }
          }
      - script: >
          pipelineJob('Containers/jnlp-slave') {
            def repo = 'https://github.com/liatrio/liatrio-jenkins.git'
            def script = 'example/slave/Jenkinsfile'
            triggers {
              scm('H/5 * * * *')
            }
            description("Pipeline for $script in $repo")
            definition {
              cpsScm {
                scm {
                  git {
                    remote { url(repo) }
                    branches('master', 'joblist')
                    scriptPath(script)
                    extensions { }  // required as otherwise it may try to tag the repo, which you may not want
                  }
                }
              }
            }
          }
    credentials:
      system:
        domainCredentials:
          - credentials:
              - usernamePassword:
                  scope:       GLOBAL
                  id:          artifactory
                  description: artifactory
                  username:    ${ARTIFACTORY_USERNAME}
                  password:    ${ARTIFACTORY_PASSWORD}
              - usernamePassword:
                  scope:       GLOBAL
                  id:          dockerhub
                  description: dockerhub
                  username:    ${DOCKERHUB_USERNAME}
                  password:    ${DOCKERHUB_PASSWORD}
              - usernamePassword:
                  scope:    GLOBAL
                  id:       bitbucket
                  description: bitbucket
                  username: ${BITBUCKET_USERNAME}
                  password: ${BITBUCKET_PASSWORD}
